{"version":3,"file":"static/js/472.1bd621bc.chunk.js","mappings":"oMAEaA,EAAW,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGF,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAd,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAA1C,gBACGI,QADH,IACGA,EAAAA,EAASC,KAFLF,EADC,KASjB,C,gFCdD,EAA4B,6BAA5B,EAAsE,8BAAtE,EAAuH,oCAAvH,EAA8O,mCAA9O,EAA8R,8B,sEC2E9R,EApEqB,WAAO,IAAD,EACzB,GAA4BM,EAAAA,EAAAA,UAAS,IAArC,eAAOV,EAAP,KAAeW,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAEA,GAAwCC,EAAAA,EAAAA,IAAgB,CAAC,GAAzD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,oBAApB,QAAoC,IAEnDC,EAAAA,EAAAA,YAAU,WACHF,IAILJ,GAAa,IACbO,EAAAA,EAAAA,IAAaH,GACVI,MAAK,SAAAC,GACJ,GAA+B,IAA3BA,EAASC,cAKX,OAJAZ,EAAU,SACVa,IAAAA,OAAAA,QAAA,oDAC+CP,IAIjDN,EAAUW,EAASG,QACpB,IACAC,OAAM,SAAAC,GACLH,IAAAA,OAAAA,QAAA,sCAAuDG,EAAMC,SAC9D,IACAC,QAAQhB,GAAa,IACzB,GAAE,CAACI,IAaJ,OACE,4BACE,gBAAKa,UAAWC,EAAhB,UACE,kBAAMC,SAdS,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAQF,EAAEG,OAAOC,MAAMF,MAAMG,cACnC,GAAqB,KAAjBH,EAAMI,OAGR,OAFA5B,EAAU,SACVa,IAAAA,OAAAA,QAAwB,mCAG1BR,EAAgB,CAAEC,UAAWkB,GAC9B,EAKmCL,UAAWC,EAAzC,WACE,kBACED,UAAWC,EACXS,KAAK,OACLlC,KAAK,QACLmC,aAAa,MACbC,WAAS,EACTC,YAAY,mBAEd,mBAAQH,KAAK,SAASV,UAAWC,EAAjC,0BAMJ,iBAAKD,UAAWC,EAAhB,UACGnB,IAAa,SAACgC,EAAA,EAAD,IAEb5C,EAAO6C,OAAS,IAAK,SAAC9C,EAAA,EAAD,CAAUC,OAAQA,SAI/C,C,+LCvED8C,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAGHC,EAAW,mCAAG,oGACFF,EAAAA,EAAAA,IAAA,qCAAwCC,IADtC,cACnBzB,EADmB,yBAElBA,EAAS2B,MAFS,2CAAH,qDAKX7B,EAAY,mCAAG,WAAM8B,GAAN,uFACHJ,EAAAA,EAAAA,IAAA,+BACGC,EADH,iCACmCG,EADnC,gCADG,cACpB5B,EADoB,yBAInBA,EAAS2B,MAJU,2CAAH,sDAOZE,EAAe,mCAAG,WAAM/C,GAAN,uFACN0C,EAAAA,EAAAA,IAAA,gBACZ1C,EADY,oBACE2C,EADF,oBADM,cACvBzB,EADuB,yBAItBA,EAAS2B,MAJa,2CAAH,sDAOfG,EAAe,mCAAG,WAAMhD,GAAN,uFACN0C,EAAAA,EAAAA,IAAA,gBACZ1C,EADY,4BACU2C,EADV,oBADM,cACvBzB,EADuB,yBAItBA,EAAS2B,MAJa,2CAAH,sDAOfI,EAAU,mCAAG,WAAMjD,GAAN,uFACD0C,EAAAA,EAAAA,IAAA,gBACZ1C,EADY,4BACU2C,EADV,2BADC,cAClBzB,EADkB,yBAIjBA,EAAS2B,MAJQ,2CAAH,qD","sources":["components/FilmList/FilmList.jsx","webpack://react-homework-template/./src/pages/movieSearch/Searchbar.module.css?2cb5","pages/movieSearch/MoviesSearch.jsx","service/api.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nexport const FilmList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {movies.map(({ id, title, name }) => (\n        <li key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            {title ?? name}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"Searchbar_searchbar__95fZq\",\"searchForm\":\"Searchbar_searchForm__9gkST\",\"searchFormbutton\":\"Searchbar_searchFormbutton__OLoAp\",\"searchFormButtonlabel\":\"Searchbar_searchFormButtonlabel__fwT4R\",\"SearchForminput\":\"Searchbar_SearchForminput__7lJN9\",\"SearchList\":\"Searchbar_SearchList__kyobk\"};","import style from './Searchbar.module.css';\nimport Notiflix from 'notiflix';\nimport { searchMovies } from '../../service/api';\nimport Loader from '../../components/loader/Loader';\nimport { FilmList } from 'components/FilmList/FilmList';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nconst MoviesSearch = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [searchParams, setSearchParams] = useSearchParams({});\n  const movieName = searchParams.get('movieName') ?? '';\n\n  useEffect(() => {\n    if (!movieName) {\n      return;\n    }\n\n    setIsLoading(true);\n    searchMovies(movieName)\n      .then(response => {\n        if (response.total_results === 0) {\n          setMovies([]);\n          Notiflix.Notify.failure(\n            `Sorry, we didn't find any films with name ${movieName}`\n          );\n          return;\n        }\n        setMovies(response.results);\n      })\n      .catch(error => {\n        Notiflix.Notify.failure(`Sorry something went wrong. ${error.message}`);\n      })\n      .finally(setIsLoading(false));\n  }, [movieName]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const value = e.target.movie.value.toLowerCase();\n    if (value.trim() === '') {\n      setMovies([]);\n      Notiflix.Notify.failure('Enter any word to search movies');\n      return;\n    }\n    setSearchParams({ movieName: value });\n  };\n\n  return (\n    <div>\n      <div className={style.searchbar}>\n        <form onSubmit={handleSubmit} className={style.searchForm}>\n          <input\n            className={style.SearchForminput}\n            type=\"text\"\n            name=\"movie\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movies\"\n          />\n          <button type=\"submit\" className={style.searchFormbutton}>\n            Search\n          </button>\n        </form>\n      </div>\n\n      <div className={style.SearchList}>\n        {isLoading && <Loader />}\n\n        {movies.length > 0 && <FilmList movies={movies} />}\n      </div>\n    </div>\n  );\n};\n\nexport default MoviesSearch;\n","\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '6730498ead9b53c83d6423d9a3bbfa5b';\n\n\nexport const getTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const searchMovies = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return response.data;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(\n    `movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieCredits = async id => {\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getReviews = async id => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n};\n"],"names":["FilmList","movies","location","useLocation","map","id","title","name","to","state","from","useState","setMovies","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","movieName","get","useEffect","searchMovies","then","response","total_results","Notiflix","results","catch","error","message","finally","className","style","onSubmit","e","preventDefault","value","target","movie","toLowerCase","trim","type","autoComplete","autoFocus","placeholder","Loader","length","axios","API_KEY","getTrending","data","query","getMovieDetails","getMovieCredits","getReviews"],"sourceRoot":""}