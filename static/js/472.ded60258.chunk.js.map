{"version":3,"file":"static/js/472.ded60258.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/FilmList/filmList.module.css?c1a7","components/FilmList/FilmList.jsx","webpack://react-homework-template/./src/pages/movieSearch/Searchbar.module.css?2cb5","pages/movieSearch/MoviesSearch.jsx","service/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movieList\":\"filmList_movieList__gH-x-\",\"posterMovie\":\"filmList_posterMovie__RTHvV\"};","import { Link, useLocation } from 'react-router-dom';\nimport notFoundImage from 'images/notFoundImage.png';\nimport style from './filmList.module.css';\nexport const FilmList = ({ movies }) => {\n  const BaseUrl = `https://image.tmdb.org/t/p/w500/`;\n\n  const location = useLocation();\n\n  return (\n    <div className=\"container\">\n      <ul className={style.movieList}>\n        {movies.map(({ id, title, original_name, poster_path }) => (\n          <li className={style.movieItem} key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <img\n                className={style.posterMovie}\n                src={poster_path ? BaseUrl.concat(poster_path) : notFoundImage}\n                alt=\"\"\n              />\n              <p className={style.titleMovie}>{title ?? original_name}</p>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"Searchbar_searchbar__95fZq\",\"searchForm\":\"Searchbar_searchForm__9gkST\",\"searchFormbutton\":\"Searchbar_searchFormbutton__OLoAp\",\"searchFormButtonlabel\":\"Searchbar_searchFormButtonlabel__fwT4R\",\"SearchForminput\":\"Searchbar_SearchForminput__7lJN9\",\"SearchList\":\"Searchbar_SearchList__kyobk\"};","import style from './Searchbar.module.css';\nimport Notiflix from 'notiflix';\nimport { searchMovies } from '../../service/api';\nimport Loader from '../../components/loader/Loader';\nimport { FilmList } from 'components/FilmList/FilmList';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nconst MoviesSearch = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [searchParams, setSearchParams] = useSearchParams({});\n  const movieName = searchParams.get('movieName') ?? '';\n\n  useEffect(() => {\n    if (!movieName) {\n      return;\n    }\n\n    setIsLoading(true);\n    searchMovies(movieName)\n      .then(response => {\n        if (response.total_results === 0) {\n          setMovies([]);\n          Notiflix.Notify.failure(\n            `Sorry, we didn't find any films with name ${movieName}`\n          );\n          return;\n        }\n        setMovies(response.results);\n      })\n      .catch(error => {\n        Notiflix.Notify.failure(`Sorry something went wrong. ${error.message}`);\n      })\n      .finally(setIsLoading(false));\n  }, [movieName]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const value = e.target.movie.value.toLowerCase();\n    if (value.trim() === '') {\n      setMovies([]);\n      Notiflix.Notify.failure('Enter any word to search movies');\n      return;\n    }\n    setSearchParams({ movieName: value });\n  };\n\n  return (\n    <div>\n      <div className={style.searchbar}>\n        <form onSubmit={handleSubmit} className={style.searchForm}>\n          <input\n            className={style.SearchForminput}\n            type=\"text\"\n            name=\"movie\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movies\"\n          />\n          <button type=\"submit\" className={style.searchFormbutton}>\n            Search\n          </button>\n        </form>\n      </div>\n\n      <div className={style.SearchList}>\n        {isLoading && <Loader />}\n\n        {movies.length > 0 && <FilmList movies={movies} />}\n      </div>\n    </div>\n  );\n};\n\nexport default MoviesSearch;\n","\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '6730498ead9b53c83d6423d9a3bbfa5b';\n// 'movie/movie_id/videos?api_key=${API_KEY}&language=en-US'\n\nexport const getTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const getSimilar = async (id) => {\n  const response = await axios.get(`movie/${id}/recommendations?api_key=${API_KEY}&language=en-US&page=1`);\n  return response.data;\n};\n\nexport const getMoviesVideo = async (id) => {\n  const response = await axios.get(\n    `movie/${id}/videos?api_key=${API_KEY}&language=en-US`\n  );\n  console.log(response.data);\n  return response.data;\n};\n\nexport const searchMovies = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return response.data;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(\n    `movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieCredits = async id => {\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getReviews = async id => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n};\n"],"names":["FilmList","movies","location","useLocation","className","style","map","id","title","original_name","poster_path","to","state","from","src","concat","notFoundImage","alt","useState","setMovies","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","movieName","get","useEffect","searchMovies","then","response","total_results","Notiflix","results","catch","error","message","finally","onSubmit","e","preventDefault","value","target","movie","toLowerCase","trim","type","name","autoComplete","autoFocus","placeholder","Loader","length","axios","API_KEY","getTrending","data","getSimilar","getMoviesVideo","console","log","query","getMovieDetails","getMovieCredits"],"sourceRoot":""}